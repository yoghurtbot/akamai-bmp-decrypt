const Crypto = require('crypto');

function decryptSensor(aesKey, sensor) {
    const parts = sensor.split("$")
    const string = parts[1]

    let sensorBuffer = Buffer.from(string, 'base64')
    sensorBuffer = sensorBuffer.slice(0, sensorBuffer.length - 32);

    const ivBuffer = sensorBuffer.subarray(0, 16)
    const valBuffer = sensorBuffer.subarray(16, sensorBuffer.length);
    const keyBuffer = Buffer.from(aesKey, 'base64');

    const cipher = Crypto.createDecipheriv('aes-128-cbc', keyBuffer, ivBuffer);
    let cryptBuffer = cipher.update(valBuffer);
    cryptBuffer = Buffer.concat([cryptBuffer, cipher.final()])

    return cryptBuffer.toString('utf-8')
}

// AES keys are generated randomly. You need the matching key used for encryption
const aesKey = '+9BKudELnmUiA9Qn8Ru+cg=='

// Encrypted sensor
const sensor = "1,a,k3AFCil6G/lfn7CfSqgQjX3WvPWJXeAvvHZN6JW8I1xwvT4LavkIin+TqqCKpe7jnDLeUJRy+nC2tD7hGEyofe/t6vIh6v9PUOxbAh9PEWyoqC8/A5LljfsvLFrpkRXg9CY501xykPb4mr7q6R/glmDcPuY6MHgtmrzj7ub/ksI=,RidvzVA7hqLB1jIU5KV4lyMkAvRfiM7XaRtD6aB+jkFUIZDdRNhlk02Ivu/x0NbWapwex45/+5I1nvFMtppHro0iDwTXjnpiKMGiEKtVr0jX2Ep/bUL89qV5knuUwwiCJXdRVenk5YcySGDe8x0dmX9r/07go/ixLu71Ts6sYAc=$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$0,1000,1000"

const decryptedSensor = decryptSensor(aesKey, sensor);

console.log(decryptedSensor);
